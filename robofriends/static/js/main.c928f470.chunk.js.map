{"version":3,"sources":["component/Card.js","component/CardList.js","component/SearchBox.js","component/Scroll.js","container/App.js","serviceWorker.js","index.js"],"names":["Card","props","id","name","email","react_default","a","createElement","className","alt","src","concat","width","height","CardList","_ref","robots","map","user","i","component_Card","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","fetch","then","response","json","users","_this3","filteredRobots","filter","toLowerCase","includes","component_SearchBox","component_Scroll","component_CardList","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","container_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oMAgBeA,QAbF,SAACC,GAAU,IACbC,EAAmBD,EAAnBC,GAAIC,EAAeF,EAAfE,KAAMC,EAASH,EAATG,MACjB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8DACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,QAAQC,IAAG,wBAAAC,OAA0BT,EAA1B,YAAwCU,MAAM,MAAMC,OAAO,SAC/ER,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKJ,GACLE,EAAAC,EAAAC,cAAA,SAAIH,OCULU,EAjBE,SAAAC,GAAc,IAAZC,EAAYD,EAAZC,OACf,OACIX,EAAAC,EAAAC,cAAA,WAEIS,EAAOC,IAAI,SAACC,EAAMC,GACd,OAAOd,EAAAC,EAAAC,cAACa,EAAD,CACCC,IAAKF,EACLjB,GAAIgB,EAAKhB,GACTC,KAAMe,EAAKf,KACXC,MAAOc,EAAKd,YCCrBkB,EAXG,SAAAP,GAAiCA,EAA/BQ,YAA+B,IAAlBC,EAAkBT,EAAlBS,aAC7B,OACInB,EAAAC,EAAAC,cAAA,SACCC,UAAU,6BACViB,KAAK,SACLC,YAAY,gBACZC,SAAUH,KCIJI,EAVA,SAAC3B,GAEZ,OACII,EAAAC,EAAAC,cAAA,OAAKsB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBlB,OAAQ,UAChEZ,EAAM+B,WCkCJC,cAlCX,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAMJI,eAAiB,SAACC,GACdR,EAAKS,SAAS,CAACpB,YAAamB,EAAME,OAAOC,SANzCX,EAAKY,MAAQ,CACTvB,YAAa,GACbP,OAAQ,IAJHkB,mFAWO,IAAAa,EAAAV,KAChBW,MAAM,8CACJC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIL,EAAKJ,SAAS,CAAC3B,OAAQoC,uCAEnC,IAAAC,EAAAhB,KACEiB,EAAiBjB,KAAKS,MAAM9B,OAAOuC,OAAO,SAAAvC,GAC5C,OAAOA,EAAOb,KAAKqD,cAAcC,SAASJ,EAAKP,MAAMvB,YAAYiC,iBAGrE,OACInD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,eACAH,EAAAC,EAAAC,cAACmD,EAAD,CAAWlC,aAAca,KAAKI,iBAC9BpC,EAAAC,EAAAC,cAACoD,EAAD,KACItD,EAAAC,EAAAC,cAACqD,EAAD,CAAU5C,OAAQsC,aA3BpBO,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.c928f470.chunk.js","sourcesContent":["import React from 'react';\nimport 'tachyons';\n\nconst Card = (props) => {\n    const {id, name, email} = props;\n    return (\n        <div className=\"tc dib pa3 ma2 shadow bg-light-green br3 grow bw2 shadow-5\">\n            <img alt='Robos' src={`https://robohash.org/${id}?200x200`} width='200' height='auto'/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n    return (\n        <div>\n        {\n            robots.map((user, i) => {\n                return <Card \n                        key={i} \n                        id={user.id} \n                        name={user.name} \n                        email={user.email}\n                        /> \n            })\n        }\n        </div>\n    )\n}\n\nexport default CardList;\n\n\n\n","import React from 'react';\n\nconst SearchBox = ({searchField, searchChange}) => {\n    return (\n        <input \n         className=\"pa2 mb3 bg-light-yellow ba\"\n         type=\"search\" \n         placeholder=\"search robots\" \n         onChange={searchChange}\n        />\n    )\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n    // console\n    return (\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\n            {props.children}\n        </div>\n        \n    )\n}\n\nexport default Scroll;\n","import React from 'react';\nimport CardList from '../component/CardList';\nimport SearchBox from '../component/SearchBox';\nimport Scroll from '../component/Scroll';\n\nclass App extends React.Component {\n    constructor(){\n        super();\n        this.state = {\n            searchField: '',\n            robots: []\n        }\n    }\n    onSearchChange = (event) =>{\n        this.setState({searchField: event.target.value});\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n         .then(response => response.json())\n         .then(users => this.setState({robots: users}));\n    }\n    render(){\n        const filteredRobots = this.state.robots.filter(robots => {\n            return robots.name.toLowerCase().includes(this.state.searchField.toLowerCase());\n        });\n\n        return (\n            <div className=\"tc\">\n                <h1 className=\"f1 yellow upper\">ROBOFRIENDS</h1>\n                <SearchBox searchChange={this.onSearchChange}/>\n                <Scroll>\n                    <CardList robots={filteredRobots}/>\n                </Scroll>\n                \n            </div>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './container/index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}